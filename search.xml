<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MySQL学习</title>
    <url>/2022/02/13/MySQL/</url>
    <content><![CDATA[<p><img src="http://static.runoob.com/images/runoob-logo.png" alt="RUNOOB 图标"></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/02/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>python数据挖掘</title>
    <url>/2022/03/20/shujuwajue/index/</url>
    <content><![CDATA[<h2 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h2><p>1.在jupyter中分别构建列表，集合；将列表乱序输出；将集合头部元素弹出；创建两个字典，用字典2内容更新字典1内容。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">list1 = [1,2,5,6,9,8]</span><br><span class="line"># shuffle（）乱序输出</span><br><span class="line">random.shuffle(list1)</span><br><span class="line">print(list1)</span><br><span class="line">a1 = &#123;&quot;name&quot;:&quot;admin&quot;,&quot;age&quot;:21&#125;</span><br><span class="line">a2 = &#123;&quot;sex&quot;:&quot;male&quot;,&quot;age&quot;:22&#125;</span><br><span class="line"># dict 创建字典构造器</span><br><span class="line">a3 = dict(a1)</span><br><span class="line"># key相同则会替换上一个定义的value</span><br><span class="line">a3.update(a2)</span><br><span class="line">print(a3)</span><br></pre></td></tr></table></figure>
<p>2.使用numpy随机生成一个长度为12的乱序数组,更改其维度为3行4列。在随机生成一个长度为16的，满足正态分布的乱序数组，更改其维度为4行4列，对数组1转置后与数组2做ufunc加法运算。输出结果。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import random</span><br><span class="line">array1 = np.arange(12)</span><br><span class="line">random.shuffle(array1)</span><br><span class="line">array2 = array1.reshape(3,4)</span><br><span class="line">array3 = np.arange(16)</span><br><span class="line">a = np.random.normal(array3)</span><br><span class="line">a1 = a.reshape(4,4)</span><br><span class="line">array_2 = array2.transpose(1,0)</span><br><span class="line">b0 = np.arange(12)</span><br><span class="line">random.shuffle(b0)</span><br><span class="line">b = b0.reshape(4,3)</span><br><span class="line">array0 = array_2 + b</span><br><span class="line">print(&quot;两个矩阵相加:\n&quot;,array0)</span><br></pre></td></tr></table></figure>

<p>3.创建数据框，索引为id,name,sex和score，用此索引描述5名学生的信息。修改引入新索引major，填充值为bigdata。按性别对其分组并统计每组score的平均值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data1 = &#123;</span><br><span class="line">    &#x27;id&#x27;:[1,2,3,4],</span><br><span class="line">    &#x27;name&#x27;:[&#x27;小雪&#x27;,&#x27;小千&#x27;,&#x27;小郑&#x27;,&#x27;小吕&#x27;],</span><br><span class="line">    &#x27;sex&#x27;:[&#x27;girl&#x27;,&#x27;male&#x27;,&#x27;girl&#x27;,&#x27;male&#x27;],</span><br><span class="line">    &#x27;score&#x27;:[13,14,5,21]</span><br><span class="line">&#125;</span><br><span class="line">df1 = pd.DataFrame(data1, columns= [&#x27;id&#x27;,&#x27;name&#x27;,&#x27;sex&#x27;,&#x27;score&#x27;])</span><br><span class="line">display(df1)</span><br><span class="line">df1[&#x27;major&#x27;]=&#x27;bigdata&#x27;</span><br><span class="line">display(df1)</span><br><span class="line">df1_1 = df1.groupby(&#x27;sex&#x27;).mean()</span><br><span class="line">print(&#x27;score数据的平均值为:\n&#x27;)</span><br></pre></td></tr></table></figure>



<p>4.对鸢尾花数据集中petal_length和petal_width两列数据进行一元线性回归分析。先导入数据集并随机采样展示10行数据。对上述两列数据进行预处理并进行回归分析，画出散点图和回归线。打印回归方程的截距和斜率。根据回归模型，给定花萼长度为4.0的花，预测其花萼宽度。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn.datasets import load_iris</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">iris = load_iris()</span><br><span class="line">data = pd.DataFrame(iris.data)</span><br><span class="line">data.columns = [&#x27;sepal-lenght&#x27;,&#x27;sepal-width&#x27;,&#x27;petal-length&#x27;,&#x27;petal-width&#x27;]</span><br><span class="line">data.head(10)</span><br><span class="line">x = data[&#x27;petal-length&#x27;].values</span><br><span class="line">y = data[&#x27;petal-width&#x27;].values</span><br><span class="line">x = x.reshape(len(x),1)</span><br><span class="line">y = y.reshape(len(y),1)</span><br><span class="line">clf = LinearRegression()</span><br><span class="line">clf.fit(x,y)</span><br><span class="line">pre = clf.predict(x)</span><br><span class="line">plt.scatter(x,y,s=50)</span><br><span class="line">plt.plot(x,pre,&#x27;r-&#x27;,linewidth=2)</span><br><span class="line">plt.xlabel(&#x27;petal-lenght&#x27;)</span><br><span class="line">plt.ylabel(&#x27;petal-width&#x27;)</span><br><span class="line">for idx,m in enumerate(x):</span><br><span class="line">    plt.plot([m,m],[y[idx],pre[idx]],&#x27;g-&#x27;)</span><br><span class="line">plt.show()</span><br><span class="line">print(u&#x27;系数&#x27;,clf.coef_)</span><br><span class="line">print(u&#x27;截距&#x27;,clf.intercept_)</span><br><span class="line">print(u&#x27;花萼长度为4.0的花的花萼宽度:&#x27;,clf.predict([[4.0]]))</span><br></pre></td></tr></table></figure>

<p>5.引入boston房价数据集，建立多元线性回归模型，建模时将数据集随机分为训练集和测试集。使用训练集训练模型，使用测试集测试，并打印测试集的均方误差。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">import pandas as pd</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">from sklearn import datasets</span><br><span class="line">d = datasets.load_boston()</span><br><span class="line">data = pd.DataFrame(d.data)</span><br><span class="line">data[&#x27;price&#x27;] = d.target</span><br><span class="line">data.sample(5)</span><br><span class="line">x = d.data[d.target&lt;50]</span><br><span class="line">y = d.target[d.target&lt;50]</span><br><span class="line">from sklearn.linear_model import LinearRegression</span><br><span class="line">simple2 = LinearRegression()</span><br><span class="line">from sklearn.model_selection import train_test_split</span><br><span class="line">x_train,x_test,y_train,y_test = train_test_split(x,y,random_state=666)</span><br><span class="line">simple2.fit(x_train,y_train)</span><br><span class="line">print(&#x27;多元线性回归模型系数：\n&#x27;,simple2.coef_)</span><br><span class="line">print(&#x27;多元线性回归模型常数项：\n&#x27;,simple2.intercept_)</span><br><span class="line">y_predict = simple2.predict(x_test)</span><br><span class="line">from sklearn.metrics import mean_absolute_error</span><br><span class="line">from sklearn.metrics import mean_squared_error</span><br><span class="line">from sklearn.metrics import r2_score  </span><br><span class="line">print(&#x27;预测值的均方误差：&#x27;,mean_squared_error(y_test,y_predict))</span><br><span class="line">print(r2_score(y_test,y_predict))</span><br><span class="line">print(simple2.score(x_test,y_test))</span><br><span class="line">print(&#x27;各特征间的系数矩阵：\n&#x27;,simple2.coef_)              </span><br><span class="line">print(&#x27;影响房价的特征排序：\n&#x27;,np.argsort(simple2.coef_)) </span><br><span class="line">print(&#x27;影响房价的特征系数排序：\n&#x27;,d.feature_names[np.argsort(simple2.coef_)])</span><br></pre></td></tr></table></figure>

<p>6.利用SVM对iris数据集进行分类，自定义合理的训练集和测试集比例。根绝混淆矩阵，输出模型在三分类上的的准确率，召回率，查准率和F1score的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">from sklearn import svm</span><br><span class="line">from sklearn import datasets</span><br><span class="line">from sklearn import metrics</span><br><span class="line">from sklearn import model_selection</span><br><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">x,y = iris.data,iris.target</span><br><span class="line">x_train,x_test,y_train,y_test = model_selection.train_test_split(x,y,test_size=0.2,random_state=1)</span><br><span class="line">classifier = svm.SVC(kernel=&#x27;linear&#x27;,gamma=0.1,</span><br><span class="line">                    decision_function_shape=&#x27;ovo&#x27;,C=0.1)</span><br><span class="line">classifier.fit(x_train,y_train.ravel())</span><br><span class="line">print(&quot;SVM-输出训练集的准确率为:&quot;,classifier.score(x_train,y_train))</span><br><span class="line">print(&quot;SVM-输出测试集的准确率为:&quot;,classifier.score(x_test,y_test))</span><br><span class="line">y_hat = classifier.predict(x_test)</span><br><span class="line">classreport = metrics.classification_report(y_test,y_hat)</span><br><span class="line">print(classreport)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>7.利用Kmeans算法实现对iris数据集的聚类分析</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import matplotlib.pyplot as plt</span><br><span class="line">import numpy as np</span><br><span class="line">from sklearn.cluster import KMeans         </span><br><span class="line">#from sklearn import datasets</span><br><span class="line">from sklearn.datasets import load_iris    </span><br><span class="line">iris = load_iris()</span><br><span class="line">X = iris.data[:]  </span><br><span class="line">estimator = KMeans(n_clusters=2)       </span><br><span class="line">estimator.fit(X)                      </span><br><span class="line">label_pred = estimator.labels_         </span><br><span class="line">x0 = X[label_pred == 0]</span><br><span class="line">x1 = X[label_pred == 1]</span><br><span class="line">x2 = X[label_pred == 2]</span><br><span class="line">plt.scatter(x0[:, 0], x0[:, 1], c = &quot;red&quot;, marker=&#x27;o&#x27;, label=&#x27;label0&#x27;)</span><br><span class="line">plt.scatter(x1[:, 0], x1[:, 1], c = &quot;green&quot;, marker=&#x27;*&#x27;, label=&#x27;label1&#x27;)</span><br><span class="line">plt.scatter(x2[:, 0], x2[:, 1], c = &quot;blue&quot;, marker=&#x27;+&#x27;, label=&#x27;label2&#x27;)</span><br><span class="line">plt.xlabel(&#x27;petal length&#x27;)</span><br><span class="line">plt.ylabel(&#x27;petal width&#x27;)</span><br><span class="line">plt.legend(loc=2)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
</search>
